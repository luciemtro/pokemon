import { NextResponse } from "next/server";
import { getConnection } from "@/lib/db";
import bcrypt from "bcryptjs";
import { RowDataPacket } from "mysql2";
import { sendEmail } from "@/lib/mailer";

interface User extends RowDataPacket {
  id: number;
  email: string;
  password: string;
  role: "user" | "admin";
}

export async function POST(request: Request) {
  console.log("üöÄ Requ√™te re√ßue pour inscription");

  let connection;
  try {
    const body = await request.json();
    console.log("üì© Donn√©es re√ßues :", body);

    const { email, password, role = "user" } = body;

    if (!email || !password) {
      console.error("‚ùå Email ou mot de passe manquant !");
      return NextResponse.json(
        { message: "Email et mot de passe sont requis." },
        { status: 400 }
      );
    }

    connection = await getConnection();
    console.log("üîå Connexion √† la DB r√©ussie");

    // V√©rifier si l'utilisateur existe d√©j√†
    const [existingUsers] = await connection.execute<User[]>(
      "SELECT id FROM users WHERE email = ?",
      [email]
    );

    if (existingUsers.length > 0) {
      console.warn("‚ö†Ô∏è Email d√©j√† utilis√© :", email);
      return NextResponse.json(
        { message: "Email already in use!" },
        { status: 400 }
      );
    }

    // Hacher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("üîí Mot de passe hash√© avec succ√®s");

    // Ins√©rer l'utilisateur
    await connection.execute(
      "INSERT INTO users (email, password, role) VALUES (?, ?, ?)",
      [email, hashedPassword, role]
    );
    console.log("‚úÖ Utilisateur cr√©√© dans la base de donn√©es");

    // Envoyer un e-mail de bienvenue
    const subject = "Bienvenue sur mon site Pok√©mon !";
    const htmlContent = `Bonjour,\n\nMerci de vous √™tre inscrit !\n\nBienvenue √† bord !`;

    try {
      await sendEmail(email, subject, htmlContent);
      console.log("üì© Email de bienvenue envoy√© avec succ√®s");
    } catch (emailError) {
      console.warn("‚ö†Ô∏è Erreur lors de l'envoi de l'email :", emailError);
    }

    return NextResponse.json(
      { message: "User created successfully!" },
      { status: 201 }
    );
  } catch (error) {
    console.error("‚ùå Erreur interne :", error);
    return NextResponse.json(
      { message: "Something went wrong!" },
      { status: 500 }
    );
  } finally {
    if (connection) {
      connection.release();
    }
  }
}
